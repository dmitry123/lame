#ifndef __LAME_LANG__DEFAULT_LEX_MANAGER__
#define __LAME_LANG__DEFAULT_LEX_MANAGER__

#include "../TokenManager.h"

LAME_LANG_BEGIN_WITH(java)

enum class TokenType : UInt32 {
	/* Defaults */
	IDENTIFIER,
	/* Type Constants */
	CONST_INTEGER,
	CONST_FLOAT,
	CONST_STRING,
	CONST_CHAR,
	/* Brackets & Braces */
	RIGHT_BRACKET,
	LEFT_BRACKET,
	RIGHT_PARENTHESIS,
	LEFT_PARENTHESIS,
	RIGHT_BRACE,
	LEFT_BRACE,
	/* Language Specials */
	ARGUMENT_LIST,
	/* Operators */
	ARRAY_INDEX,
	METHOD_CALL,
	MEMBER_ACCESS,
	POSTFIX_INCREMENT,
	PREFIX_INCREMENT,
	POSTFIX_DECREMENT,
	PREFIX_DECREMENT,
	UNARY_PLUS,
	UNARY_MINUS,
	BITWISE_NOT,
	BOOLEAN_NOT,
	TYPE_CAST,
	OBJECT_CREATION,
	MULTIPLICATION,
	DIVISION,
	REMAINDER,
	ADDITION,
	SUBSTRACTION,
	STRING_CONCATENATION,
	UNSIGNED_BIT_SHIFT_RIGHT,
	SIGNED_BIT_SHIFT_LEFT,
	SIGNED_BIT_SHIFT_RIGHT,
	LESS_THAN,
	LESS_THAN_OR_EQUAL,
	GREATER_THEN,
	GREATER_THEN_OR_EQUAL,
	INSTANCE_OF,
	EQUAL,
	NOT_EQUAL,
	BITWISE_AND,
	BITWISE_XOR,
	BITWISE_OR,
	BOOLEAN_OR,
	BOOLEAN_AND,
	CONDITIONAL,
	ASSIGNMENT,
	MULTIPLICATION_ASSIGNMENT,
	DIVISION_ASSIGNMENT,
	REMAINDER_ASSIGNMENT,
	ADDITION_ASSIGNMENT,
	SUBSTRACTION_ASSIGNMENT,
	STRING_CONCATENATION_ASSIGNMENT,
	UNSIGNED_BIT_SHIFT_RIGHT_ASSIGNMENT,
	SIGNED_BIT_SHIFT_LEFT_ASSIGNMENT,
	SIGNED_BIT_SHIFT_RIGHT_ASSIGNMENT,
	RETURN,
	/* Language Construction & Keywords */
	IF,
	ELSE,
	WHILE,
	DO,
	FOR,
	TRY,
	CATCH,
	FINALLY,
	THROW,
	THROWS,
	SWITCH,
	CLASS,
	ENUM,
	INTERFACE,
	ANNOTATION,
	IMPLEMENTS,
	EXTENDS,
	BREAK,
	CONTINUE,
	PUBLIC,
	PRIVATE,
	PROTECTED,
	STATIC,
	NATIVE,
	FINAL,
	ABSTRACT,
	SYNCHRONIZED,
	DEFAULT,
	CASE,
	PACKAGE,
	IMPORT,
	GOTO,
	TRASIENT,
	VOLATILE,
	THIS,
	SUPER,
	/* Others */
	COMMA,
	LEFT_COMMENT,
	RIGHT_COMMENT,
	LINE_COMMENT,
	QUOTE,
	APOSTROPHE,
	SEMICOLON,
	COLON,
	/* System */
	_TEMP,
	_TOTAL
};

typedef class TokenManager : public ::lame::lang::TokenManager<TokenType> {
public:
	typedef ::lame::lang::TokenManager<TokenType> Parent, *ParentPtr;
public:
	TokenManager(const TokenMap& map) :
		Parent(map)
	{
	}
public:
	static ParentPtr getManager();
} *TokenManagerPtr;

LAME_LANG_END_WITH

#endif // ~__LAME_LANG__DEFAULT_LEX_MANAGER__